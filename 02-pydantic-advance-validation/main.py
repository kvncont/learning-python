
from typing import Self
import uuid
from pydantic import (
    BaseModel,
    EmailStr,
    ValidationInfo,
    field_validator,
    Field,
    SecretStr,
    UUID4,
    ValidationError,
    model_validator,
)


class User(BaseModel):
    id: UUID4 = Field(default_factory=uuid.uuid4, examples=uuid.uuid4(),
                      description="User ID generated by UUID4")
    name: str = Field(examples="Gabriel",
                      description="User name", min_length=2, max_length=50)
    last_name: str = Field(examples="Contreras", description="User last name",
                           alias="lastName", min_length=2, max_length=50)
    email: EmailStr = Field(example="gabriel.contreras@email.com", frozen=True)
    password1: SecretStr = Field(
        examples="123456", min_length=6, max_length=10, exclude=True)
    password2: SecretStr = Field(
        examples="123456", min_length=6, max_length=10, exclude=True)

    @field_validator("email")
    @classmethod
    def validate_email_domain(cls, value: str, info: ValidationInfo) -> EmailStr:
        # info.field_name is the name of the field to validate
        print(info.data["name"]) # Access to the data of the model
        if not value.endswith("@email.com"):
            raise ValueError(f"Invalid {info.field_name} domain")
        return value
    
    @model_validator(mode='after')
    def check_passwords_match(self) -> Self:
        pw1 = self.password1
        pw2 = self.password2
        if pw1 is not None and pw2 is not None and pw1 != pw2:
            raise ValueError('passwords do not match')
        return self

    # Se puede hacer lo mismo con un field_validator pero no es la mejor práctica
    # @field_validator("password2")
    # @classmethod
    # def check_passwords_match(cls, value: str, info: ValidationInfo) -> Self:
    #     pw1 = info.data["password1"]
    #     pw2 = value
    #     if pw1 is not None and pw2 is not None and pw1 != pw2:
    #         raise ValueError('passwords do not match')
    #     return pw1



user = User(name="Gabriel", lastName="Contreras",
            email="gabriel.contreras@email.com", password1="123456", password2="123456")
print(user.model_dump_json(by_alias=True))
print(user.model_dump_json(by_alias=True, exclude_defaults=True, exclude_unset=True))


data = {
    "name": "Darío",
    "lastName": "Contreras",
    # "email": "dario.contreras@gmail.com",
    "email": "dario.contreras@email.com",
    "password1": "123456",
    "password2": "123456"
}

user2 = User(**data)
print(user2.model_dump_json(by_alias=True, exclude_defaults=True, exclude_unset=True))
